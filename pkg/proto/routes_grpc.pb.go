// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pkg/proto/routes.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoutesService_CreateRoute_FullMethodName = "/routes.RoutesService/CreateRoute"
	RoutesService_GetRoute_FullMethodName    = "/routes.RoutesService/GetRoute"
	RoutesService_UpdateRoute_FullMethodName = "/routes.RoutesService/UpdateRoute"
	RoutesService_DeleteRoute_FullMethodName = "/routes.RoutesService/DeleteRoute"
)

// RoutesServiceClient is the client API for RoutesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutesServiceClient interface {
	CreateRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*RouteResponse, error)
	GetRoute(ctx context.Context, in *RouteID, opts ...grpc.CallOption) (*Route, error)
	UpdateRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*RouteResponse, error)
	DeleteRoute(ctx context.Context, in *RouteID, opts ...grpc.CallOption) (*RouteResponse, error)
}

type routesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutesServiceClient(cc grpc.ClientConnInterface) RoutesServiceClient {
	return &routesServiceClient{cc}
}

func (c *routesServiceClient) CreateRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*RouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteResponse)
	err := c.cc.Invoke(ctx, RoutesService_CreateRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesServiceClient) GetRoute(ctx context.Context, in *RouteID, opts ...grpc.CallOption) (*Route, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Route)
	err := c.cc.Invoke(ctx, RoutesService_GetRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesServiceClient) UpdateRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*RouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteResponse)
	err := c.cc.Invoke(ctx, RoutesService_UpdateRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesServiceClient) DeleteRoute(ctx context.Context, in *RouteID, opts ...grpc.CallOption) (*RouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteResponse)
	err := c.cc.Invoke(ctx, RoutesService_DeleteRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutesServiceServer is the server API for RoutesService service.
// All implementations must embed UnimplementedRoutesServiceServer
// for forward compatibility.
type RoutesServiceServer interface {
	CreateRoute(context.Context, *Route) (*RouteResponse, error)
	GetRoute(context.Context, *RouteID) (*Route, error)
	UpdateRoute(context.Context, *Route) (*RouteResponse, error)
	DeleteRoute(context.Context, *RouteID) (*RouteResponse, error)
	mustEmbedUnimplementedRoutesServiceServer()
}

// UnimplementedRoutesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoutesServiceServer struct{}

func (UnimplementedRoutesServiceServer) CreateRoute(context.Context, *Route) (*RouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoute not implemented")
}
func (UnimplementedRoutesServiceServer) GetRoute(context.Context, *RouteID) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedRoutesServiceServer) UpdateRoute(context.Context, *Route) (*RouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoute not implemented")
}
func (UnimplementedRoutesServiceServer) DeleteRoute(context.Context, *RouteID) (*RouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedRoutesServiceServer) mustEmbedUnimplementedRoutesServiceServer() {}
func (UnimplementedRoutesServiceServer) testEmbeddedByValue()                       {}

// UnsafeRoutesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutesServiceServer will
// result in compilation errors.
type UnsafeRoutesServiceServer interface {
	mustEmbedUnimplementedRoutesServiceServer()
}

func RegisterRoutesServiceServer(s grpc.ServiceRegistrar, srv RoutesServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoutesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoutesService_ServiceDesc, srv)
}

func _RoutesService_CreateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServiceServer).CreateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutesService_CreateRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServiceServer).CreateRoute(ctx, req.(*Route))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutesService_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServiceServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutesService_GetRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServiceServer).GetRoute(ctx, req.(*RouteID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutesService_UpdateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServiceServer).UpdateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutesService_UpdateRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServiceServer).UpdateRoute(ctx, req.(*Route))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutesService_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServiceServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutesService_DeleteRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServiceServer).DeleteRoute(ctx, req.(*RouteID))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutesService_ServiceDesc is the grpc.ServiceDesc for RoutesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routes.RoutesService",
	HandlerType: (*RoutesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoute",
			Handler:    _RoutesService_CreateRoute_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _RoutesService_GetRoute_Handler,
		},
		{
			MethodName: "UpdateRoute",
			Handler:    _RoutesService_UpdateRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _RoutesService_DeleteRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/routes.proto",
}
